* primero encontre la oportunidad de fintual, lei el trabajo, el desafio y las herramientas que utilizan.
* compare las herramientas que yo manejo y las que ellos utilizan. nose ruby on rails, nose React, nose React Native, pero si utilizo typescript y tengo muchos conceptos de UX y front.
* lei la documentacion oficial de ruby on rails(https://rubyonrails.org/docs), viendo como realizar el backend y la logica de lo solicitado, el framework es MVC
* investige como retornar solo json, utilizando templates de json es posible (google y llege a https://stackoverflow.com/questions/2088280/in-rails-how-do-you-render-json-using-a-view).
* investige si es posible crear solo una clase sin necesidad de una bd, tambien es posible(la documentacion inicial empieza directo a unirlo a una estructura de bd) (googlie  y llege a  https://guides.rubyonrails.org/active_record_basics.html donde explican mejor el uso)
* me decido en realizarlo en ruby on rails, como desafio personal(primera ves utilizandolo) y para estar acorde a las tecnologias que piden.

* antes de comenzar a codear analiso el problema presentado, donde obtengo los siguientes puntos-requerimientos:
** definiciones que asumo, un portafolio tiene un listado de stocks en su haber con una cantidad por cada uno, 
    tambien tiene un listado de aimstocks los cuales indican el stock y porcentaje que deberia tener el portafolio, 
    la funcion de rebalanceo es en base al valor de los stocks(cantidad x precio).
** clase stock -> contiene el id del stock,nombre y una funcion de precio actual.
** clase PortfolioStocks -> contiene un stock y una cantidad.
** clase PortfolioStockAim -> contiene un stock y un porcentaje.
** clase portafolio -> contiene un listado de stockQuantity, un listado de stockAim, un nombre, una funcion de rebalance.

** logica de rebalance -> considero el balanceo de precio x cantidad, 
    recorro los stockQuantity sumando el total de cada uno en moneda(cantidad x precio) y tambien sumo el total de las monedas para obtener el porcentaje de cada uno.
    recorro los stocks aim y comparo los porcentajes obtenidos versus los que se desean, si hay diferencia, calculo la cantidad que se debe comprar o vender para llegar
    retorno el listado en json de los stock que se deben mover.
    ** esta logica es la que pense inicialmente, dentro del modelo de portafolio en la funcion de balanceo agrege un par de comentarios y condiciones adicionales

* Luego de definir la estructura comence a realizar el proyecto de ruby on rails.
* cree los modelos a traves del comando "bin/rails generate model ..." ajustando las variables de las tablas segun los requerimientos
* agrege las relaciones entre los modelos.
* agrege las validaciones de los campos en los modelos
* cree las rutas a Portfolio, modificando archivo "config/routes.rb".
* cree el controlador Portfolios , a traves del comando "bin/rails generate controller ..."
* cree vistas de portfolio basicas (opte por hacer tablas basicas de datos para no alargar mas el tiempo de desarrollo). 
* cree controlador de stocks con vistas basicas y ruta.
* creacion de objetivos de stock de portafolios con funciones de controlador y ruta.
* para la creacion de los forms me base en la guia https://guides.rubyonrails.org/form_helpers.html
* movi la logica de rebalance a el modelo de portafolio, junto a las funciones de compra y venta de stocks.
* agrege un par de estilos para la vista del portafolio.
* hice ajustes de redondeo en vista y orden de datos.
* termine el codigo.
* agrege datos de prueba

* MEJORAS:
** Mover logicas de portafolio stocks y aims al modelo de portafolio.
** considerar los valores redondeados para evitar problemas de precision en el rebalanceo.
** mejorar las visuales.
** testing de componentes